package export

// Generated by 'goexports crypto/tls'. Do not edit!

import "crypto/tls"

// CryptoTLS contains exported symbols from crypto/tls
var CryptoTLS = &map[string]interface{}{
	"Certificate":                             new(tls.Certificate),
	"CertificateRequestInfo":                  new(tls.CertificateRequestInfo),
	"Client":                                  tls.Client,
	"ClientAuthType":                          new(tls.ClientAuthType),
	"ClientHelloInfo":                         new(tls.ClientHelloInfo),
	"ClientSessionCache":                      new(tls.ClientSessionCache),
	"ClientSessionState":                      new(tls.ClientSessionState),
	"Config":                                  new(tls.Config),
	"Conn":                                    new(tls.Conn),
	"ConnectionState":                         new(tls.ConnectionState),
	"CurveID":                                 new(tls.CurveID),
	"CurveP256":                               tls.CurveP256,
	"CurveP384":                               tls.CurveP384,
	"CurveP521":                               tls.CurveP521,
	"Dial":                                    tls.Dial,
	"DialWithDialer":                          tls.DialWithDialer,
	"ECDSAWithP256AndSHA256":                  tls.ECDSAWithP256AndSHA256,
	"ECDSAWithP384AndSHA384":                  tls.ECDSAWithP384AndSHA384,
	"ECDSAWithP521AndSHA512":                  tls.ECDSAWithP521AndSHA512,
	"ECDSAWithSHA1":                           tls.ECDSAWithSHA1,
	"Listen":                                  tls.Listen,
	"LoadX509KeyPair":                         tls.LoadX509KeyPair,
	"NewLRUClientSessionCache":                tls.NewLRUClientSessionCache,
	"NewListener":                             tls.NewListener,
	"NoClientCert":                            tls.NoClientCert,
	"PKCS1WithSHA1":                           tls.PKCS1WithSHA1,
	"PKCS1WithSHA256":                         tls.PKCS1WithSHA256,
	"PKCS1WithSHA384":                         tls.PKCS1WithSHA384,
	"PKCS1WithSHA512":                         tls.PKCS1WithSHA512,
	"PSSWithSHA256":                           tls.PSSWithSHA256,
	"PSSWithSHA384":                           tls.PSSWithSHA384,
	"PSSWithSHA512":                           tls.PSSWithSHA512,
	"RecordHeaderError":                       new(tls.RecordHeaderError),
	"RenegotiateFreelyAsClient":               tls.RenegotiateFreelyAsClient,
	"RenegotiateNever":                        tls.RenegotiateNever,
	"RenegotiateOnceAsClient":                 tls.RenegotiateOnceAsClient,
	"RenegotiationSupport":                    new(tls.RenegotiationSupport),
	"RequestClientCert":                       tls.RequestClientCert,
	"RequireAndVerifyClientCert":              tls.RequireAndVerifyClientCert,
	"RequireAnyClientCert":                    tls.RequireAnyClientCert,
	"Server":                                  tls.Server,
	"SignatureScheme":                         new(tls.SignatureScheme),
	"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA":    tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
	"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256": tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
	"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256": tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
	"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":    tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
	"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384": tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
	"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305":  tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,
	"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA":        tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
	"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA":     tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
	"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA":      tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256":   tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
	"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256":   tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
	"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA":      tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
	"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384":   tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
	"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305":    tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,
	"TLS_ECDHE_RSA_WITH_RC4_128_SHA":          tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA,
	"TLS_FALLBACK_SCSV":                       tls.TLS_FALLBACK_SCSV,
	"TLS_RSA_WITH_3DES_EDE_CBC_SHA":           tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA,
	"TLS_RSA_WITH_AES_128_CBC_SHA":            tls.TLS_RSA_WITH_AES_128_CBC_SHA,
	"TLS_RSA_WITH_AES_128_CBC_SHA256":         tls.TLS_RSA_WITH_AES_128_CBC_SHA256,
	"TLS_RSA_WITH_AES_128_GCM_SHA256":         tls.TLS_RSA_WITH_AES_128_GCM_SHA256,
	"TLS_RSA_WITH_AES_256_CBC_SHA":            tls.TLS_RSA_WITH_AES_256_CBC_SHA,
	"TLS_RSA_WITH_AES_256_GCM_SHA384":         tls.TLS_RSA_WITH_AES_256_GCM_SHA384,
	"TLS_RSA_WITH_RC4_128_SHA":                tls.TLS_RSA_WITH_RC4_128_SHA,
	"VerifyClientCertIfGiven":                 tls.VerifyClientCertIfGiven,
	"VersionSSL30":                            tls.VersionSSL30,
	"VersionTLS10":                            tls.VersionTLS10,
	"VersionTLS11":                            tls.VersionTLS11,
	"VersionTLS12":                            tls.VersionTLS12,
	"X25519":                                  tls.X25519,
	"X509KeyPair":                             tls.X509KeyPair,
}
