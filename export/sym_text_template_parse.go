package export

// Generated by 'goexports text/template/parse'. Do not edit!

import "text/template/parse"

// TemplateParse contains exported symbols from text/template/parse
var TemplateParse = &map[string]interface{}{
	"ActionNode":     new(parse.ActionNode),
	"BoolNode":       new(parse.BoolNode),
	"BranchNode":     new(parse.BranchNode),
	"ChainNode":      new(parse.ChainNode),
	"CommandNode":    new(parse.CommandNode),
	"DotNode":        new(parse.DotNode),
	"FieldNode":      new(parse.FieldNode),
	"IdentifierNode": new(parse.IdentifierNode),
	"IfNode":         new(parse.IfNode),
	"IsEmptyTree":    parse.IsEmptyTree,
	"ListNode":       new(parse.ListNode),
	"New":            parse.New,
	"NewIdentifier":  parse.NewIdentifier,
	"NilNode":        new(parse.NilNode),
	"Node":           new(parse.Node),
	"NodeAction":     parse.NodeAction,
	"NodeBool":       parse.NodeBool,
	"NodeChain":      parse.NodeChain,
	"NodeCommand":    parse.NodeCommand,
	"NodeDot":        parse.NodeDot,
	"NodeField":      parse.NodeField,
	"NodeIdentifier": parse.NodeIdentifier,
	"NodeIf":         parse.NodeIf,
	"NodeList":       parse.NodeList,
	"NodeNil":        parse.NodeNil,
	"NodeNumber":     parse.NodeNumber,
	"NodePipe":       parse.NodePipe,
	"NodeRange":      parse.NodeRange,
	"NodeString":     parse.NodeString,
	"NodeTemplate":   parse.NodeTemplate,
	"NodeText":       parse.NodeText,
	"NodeType":       new(parse.NodeType),
	"NodeVariable":   parse.NodeVariable,
	"NodeWith":       parse.NodeWith,
	"NumberNode":     new(parse.NumberNode),
	"Parse":          parse.Parse,
	"PipeNode":       new(parse.PipeNode),
	"Pos":            new(parse.Pos),
	"RangeNode":      new(parse.RangeNode),
	"StringNode":     new(parse.StringNode),
	"TemplateNode":   new(parse.TemplateNode),
	"TextNode":       new(parse.TextNode),
	"Tree":           new(parse.Tree),
	"VariableNode":   new(parse.VariableNode),
	"WithNode":       new(parse.WithNode),
}
