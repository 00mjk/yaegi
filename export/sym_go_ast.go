package export

// Generated by 'goexports go/ast'. Do not edit!

import "go/ast"

// GoAst contains exported symbols from go/ast
var GoAst = &map[string]interface{}{
	"ArrayType":                  new(ast.ArrayType),
	"AssignStmt":                 new(ast.AssignStmt),
	"Bad":                        ast.Bad,
	"BadDecl":                    new(ast.BadDecl),
	"BadExpr":                    new(ast.BadExpr),
	"BadStmt":                    new(ast.BadStmt),
	"BasicLit":                   new(ast.BasicLit),
	"BinaryExpr":                 new(ast.BinaryExpr),
	"BlockStmt":                  new(ast.BlockStmt),
	"BranchStmt":                 new(ast.BranchStmt),
	"CallExpr":                   new(ast.CallExpr),
	"CaseClause":                 new(ast.CaseClause),
	"ChanDir":                    new(ast.ChanDir),
	"ChanType":                   new(ast.ChanType),
	"CommClause":                 new(ast.CommClause),
	"Comment":                    new(ast.Comment),
	"CommentGroup":               new(ast.CommentGroup),
	"CommentMap":                 new(ast.CommentMap),
	"CompositeLit":               new(ast.CompositeLit),
	"Con":                        ast.Con,
	"Decl":                       new(ast.Decl),
	"DeclStmt":                   new(ast.DeclStmt),
	"DeferStmt":                  new(ast.DeferStmt),
	"Ellipsis":                   new(ast.Ellipsis),
	"EmptyStmt":                  new(ast.EmptyStmt),
	"Expr":                       new(ast.Expr),
	"ExprStmt":                   new(ast.ExprStmt),
	"Field":                      new(ast.Field),
	"FieldFilter":                new(ast.FieldFilter),
	"FieldList":                  new(ast.FieldList),
	"File":                       new(ast.File),
	"FileExports":                ast.FileExports,
	"Filter":                     new(ast.Filter),
	"FilterDecl":                 ast.FilterDecl,
	"FilterFile":                 ast.FilterFile,
	"FilterFuncDuplicates":       ast.FilterFuncDuplicates,
	"FilterImportDuplicates":     ast.FilterImportDuplicates,
	"FilterPackage":              ast.FilterPackage,
	"FilterUnassociatedComments": ast.FilterUnassociatedComments,
	"ForStmt":                    new(ast.ForStmt),
	"Fprint":                     ast.Fprint,
	"Fun":                        ast.Fun,
	"FuncDecl":                   new(ast.FuncDecl),
	"FuncLit":                    new(ast.FuncLit),
	"FuncType":                   new(ast.FuncType),
	"GenDecl":                    new(ast.GenDecl),
	"GoStmt":                     new(ast.GoStmt),
	"Ident":                      new(ast.Ident),
	"IfStmt":                     new(ast.IfStmt),
	"ImportSpec":                 new(ast.ImportSpec),
	"Importer":                   new(ast.Importer),
	"IncDecStmt":                 new(ast.IncDecStmt),
	"IndexExpr":                  new(ast.IndexExpr),
	"Inspect":                    ast.Inspect,
	"InterfaceType":              new(ast.InterfaceType),
	"IsExported":                 ast.IsExported,
	"KeyValueExpr":               new(ast.KeyValueExpr),
	"LabeledStmt":                new(ast.LabeledStmt),
	"Lbl":                        ast.Lbl,
	"MapType":                    new(ast.MapType),
	"MergeMode":                  new(ast.MergeMode),
	"MergePackageFiles":          ast.MergePackageFiles,
	"NewCommentMap":              ast.NewCommentMap,
	"NewIdent":                   ast.NewIdent,
	"NewObj":                     ast.NewObj,
	"NewPackage":                 ast.NewPackage,
	"NewScope":                   ast.NewScope,
	"Node":                       new(ast.Node),
	"NotNilFilter":               ast.NotNilFilter,
	"ObjKind":                    new(ast.ObjKind),
	"Object":                     new(ast.Object),
	"Package":                    new(ast.Package),
	"PackageExports":             ast.PackageExports,
	"ParenExpr":                  new(ast.ParenExpr),
	"Pkg":                        ast.Pkg,
	"Print":                      ast.Print,
	"RECV":                       ast.RECV,
	"RangeStmt":                  new(ast.RangeStmt),
	"ReturnStmt":                 new(ast.ReturnStmt),
	"SEND":                       ast.SEND,
	"Scope":                      new(ast.Scope),
	"SelectStmt":                 new(ast.SelectStmt),
	"SelectorExpr":               new(ast.SelectorExpr),
	"SendStmt":                   new(ast.SendStmt),
	"SliceExpr":                  new(ast.SliceExpr),
	"SortImports":                ast.SortImports,
	"Spec":                       new(ast.Spec),
	"StarExpr":                   new(ast.StarExpr),
	"Stmt":                       new(ast.Stmt),
	"StructType":                 new(ast.StructType),
	"SwitchStmt":                 new(ast.SwitchStmt),
	"Typ":                        ast.Typ,
	"TypeAssertExpr":             new(ast.TypeAssertExpr),
	"TypeSpec":                   new(ast.TypeSpec),
	"TypeSwitchStmt":             new(ast.TypeSwitchStmt),
	"UnaryExpr":                  new(ast.UnaryExpr),
	"ValueSpec":                  new(ast.ValueSpec),
	"Var":                        ast.Var,
	"Visitor":                    new(ast.Visitor),
	"Walk":                       ast.Walk,
}
