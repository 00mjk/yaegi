package export

// Generated by 'goexports regexp/syntax'. Do not edit!

import "regexp/syntax"

// RegexpSyntax contains exported symbols from regexp/syntax
var RegexpSyntax = &map[string]interface{}{
	"ClassNL":                  syntax.ClassNL,
	"Compile":                  syntax.Compile,
	"DotNL":                    syntax.DotNL,
	"EmptyBeginLine":           syntax.EmptyBeginLine,
	"EmptyBeginText":           syntax.EmptyBeginText,
	"EmptyEndLine":             syntax.EmptyEndLine,
	"EmptyEndText":             syntax.EmptyEndText,
	"EmptyNoWordBoundary":      syntax.EmptyNoWordBoundary,
	"EmptyOp":                  new(syntax.EmptyOp),
	"EmptyOpContext":           syntax.EmptyOpContext,
	"EmptyWordBoundary":        syntax.EmptyWordBoundary,
	"ErrInternalError":         syntax.ErrInternalError,
	"ErrInvalidCharClass":      syntax.ErrInvalidCharClass,
	"ErrInvalidCharRange":      syntax.ErrInvalidCharRange,
	"ErrInvalidEscape":         syntax.ErrInvalidEscape,
	"ErrInvalidNamedCapture":   syntax.ErrInvalidNamedCapture,
	"ErrInvalidPerlOp":         syntax.ErrInvalidPerlOp,
	"ErrInvalidRepeatOp":       syntax.ErrInvalidRepeatOp,
	"ErrInvalidRepeatSize":     syntax.ErrInvalidRepeatSize,
	"ErrInvalidUTF8":           syntax.ErrInvalidUTF8,
	"ErrMissingBracket":        syntax.ErrMissingBracket,
	"ErrMissingParen":          syntax.ErrMissingParen,
	"ErrMissingRepeatArgument": syntax.ErrMissingRepeatArgument,
	"ErrTrailingBackslash":     syntax.ErrTrailingBackslash,
	"ErrUnexpectedParen":       syntax.ErrUnexpectedParen,
	"Error":                    new(syntax.Error),
	"ErrorCode":                new(syntax.ErrorCode),
	"Flags":                    new(syntax.Flags),
	"FoldCase":                 syntax.FoldCase,
	"Inst":                     new(syntax.Inst),
	"InstAlt":                  syntax.InstAlt,
	"InstAltMatch":             syntax.InstAltMatch,
	"InstCapture":              syntax.InstCapture,
	"InstEmptyWidth":           syntax.InstEmptyWidth,
	"InstFail":                 syntax.InstFail,
	"InstMatch":                syntax.InstMatch,
	"InstNop":                  syntax.InstNop,
	"InstOp":                   new(syntax.InstOp),
	"InstRune":                 syntax.InstRune,
	"InstRune1":                syntax.InstRune1,
	"InstRuneAny":              syntax.InstRuneAny,
	"InstRuneAnyNotNL":         syntax.InstRuneAnyNotNL,
	"IsWordChar":               syntax.IsWordChar,
	"Literal":                  syntax.Literal,
	"MatchNL":                  syntax.MatchNL,
	"NonGreedy":                syntax.NonGreedy,
	"OneLine":                  syntax.OneLine,
	"Op":                       new(syntax.Op),
	"OpAlternate":              syntax.OpAlternate,
	"OpAnyChar":                syntax.OpAnyChar,
	"OpAnyCharNotNL":           syntax.OpAnyCharNotNL,
	"OpBeginLine":              syntax.OpBeginLine,
	"OpBeginText":              syntax.OpBeginText,
	"OpCapture":                syntax.OpCapture,
	"OpCharClass":              syntax.OpCharClass,
	"OpConcat":                 syntax.OpConcat,
	"OpEmptyMatch":             syntax.OpEmptyMatch,
	"OpEndLine":                syntax.OpEndLine,
	"OpEndText":                syntax.OpEndText,
	"OpLiteral":                syntax.OpLiteral,
	"OpNoMatch":                syntax.OpNoMatch,
	"OpNoWordBoundary":         syntax.OpNoWordBoundary,
	"OpPlus":                   syntax.OpPlus,
	"OpQuest":                  syntax.OpQuest,
	"OpRepeat":                 syntax.OpRepeat,
	"OpStar":                   syntax.OpStar,
	"OpWordBoundary":           syntax.OpWordBoundary,
	"POSIX":                    syntax.POSIX,
	"Parse":                    syntax.Parse,
	"Perl":                     syntax.Perl,
	"PerlX":                    syntax.PerlX,
	"Prog":                     new(syntax.Prog),
	"Regexp":                   new(syntax.Regexp),
	"Simple":                   syntax.Simple,
	"UnicodeGroups":            syntax.UnicodeGroups,
	"WasDollar":                syntax.WasDollar,
}
