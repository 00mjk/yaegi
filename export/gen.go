// +build ignore

// This program generates code to register binary program symbols to
// the interpeter.
// See export.go for usage

package main

import (
	"bufio"
	"fmt"
	"go/importer"
	"go/types"
	"log"
	"os"
	"os/exec"
	"path"
	"strings"
	"unicode"
)

func genfile(pkgName string, ofile string) error {
	pkg, err := importer.Default().Import(pkgName)
	if err != nil {
		return err
	}

	f, err := os.Create(ofile)
	if err != nil {
		return err
	}
	defer f.Close()
	out := bufio.NewWriter(f)

	symName := path.Base(pkgName)
	varName := symName
	if pkgName == "math/rand" {
		// avoid collision with crypto/rand
		varName = "math_rand"
	} else if pkgName == "text/scanner" {
		// avoid collision with go/scanner
		varName = "text_scanner"
	} else if pkgName == "text/template" {
		// avoid collision with html/template
		varName = "text_template"
	}

	// Print header
	fmt.Fprintln(out, `package export
// Generated by 'go run gen.go `+pkgName+`'. Do not edit!

import "`+pkgName+`"

var sym_`+varName+` = &map[string]interface{}{`)

	// Print package exports
	sc := pkg.Scope()
	for _, name := range sc.Names() {
		// Skip private symboles
		if r := []rune(name); unicode.IsLower(r[0]) || name[0] == '_' {
			continue
		}
		o := sc.Lookup(name)
		switch o.(type) {
		case *types.Const:
			if (pkgName == "math" && name == "MaxUint64") ||
				(pkgName == "hash/crc64" && name == "ECMA") ||
				(pkgName == "hash/crc64" && name == "ISO") {
				// go build will fail with overflow error if this const is untyped. Fix this.
				fmt.Fprintln(out, "\""+name+"\": uint("+symName+"."+name+"),")
			} else {
				fmt.Fprintln(out, "\""+name+"\": "+symName+"."+name+",")
			}
		case *types.Func:
			fmt.Fprintln(out, "\""+name+"\": "+symName+"."+name+",")
		case *types.TypeName:
			// Allocate an addressable/settable zero value from which type can be infered by reflect
			fmt.Fprintln(out, "\""+name+"\": new("+symName+"."+name+"),")
		case *types.Var:
			fmt.Fprintln(out, "\""+name+"\": "+symName+"."+name+",")
		}
	}
	fmt.Fprintln(out, "}")
	out.Flush()
	return nil
}

func main() {
	for _, pkg := range os.Args[1:] {
		ofile := "sym_" + strings.Replace(pkg, "/", "_", -1) + ".go"
		if err := genfile(pkg, ofile); err != nil {
			log.Fatal(err)
		}
		if err := exec.Command("gofmt", "-w", ofile).Run(); err != nil {
			log.Fatal(err)
		}
	}
}
