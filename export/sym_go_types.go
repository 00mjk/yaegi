package export

// Generated by 'goexports go/types'. Do not edit!

import "go/types"

// GoTypes contains exported symbols from go/types
var GoTypes = &map[string]interface{}{
	"Array":                   new(types.Array),
	"AssertableTo":            types.AssertableTo,
	"AssignableTo":            types.AssignableTo,
	"Basic":                   new(types.Basic),
	"BasicInfo":               new(types.BasicInfo),
	"BasicKind":               new(types.BasicKind),
	"Bool":                    types.Bool,
	"Builtin":                 new(types.Builtin),
	"Byte":                    types.Byte,
	"Chan":                    new(types.Chan),
	"ChanDir":                 new(types.ChanDir),
	"Checker":                 new(types.Checker),
	"Comparable":              types.Comparable,
	"Complex128":              types.Complex128,
	"Complex64":               types.Complex64,
	"Config":                  new(types.Config),
	"Const":                   new(types.Const),
	"ConvertibleTo":           types.ConvertibleTo,
	"DefPredeclaredTestFuncs": types.DefPredeclaredTestFuncs,
	"Default":                 types.Default,
	"Error":                   new(types.Error),
	"Eval":                    types.Eval,
	"ExprString":              types.ExprString,
	"FieldVal":                types.FieldVal,
	"Float32":                 types.Float32,
	"Float64":                 types.Float64,
	"Func":                    new(types.Func),
	"Id":                      types.Id,
	"Identical":               types.Identical,
	"IdenticalIgnoreTags":     types.IdenticalIgnoreTags,
	"Implements":              types.Implements,
	"ImportMode":              new(types.ImportMode),
	"Importer":                new(types.Importer),
	"ImporterFrom":            new(types.ImporterFrom),
	"Info":                    new(types.Info),
	"Initializer":             new(types.Initializer),
	"Int":                     types.Int,
	"Int16":                   types.Int16,
	"Int32":                   types.Int32,
	"Int64":                   types.Int64,
	"Int8":                    types.Int8,
	"Interface":               new(types.Interface),
	"Invalid":                 types.Invalid,
	"IsBoolean":               types.IsBoolean,
	"IsComplex":               types.IsComplex,
	"IsConstType":             types.IsConstType,
	"IsFloat":                 types.IsFloat,
	"IsInteger":               types.IsInteger,
	"IsInterface":             types.IsInterface,
	"IsNumeric":               types.IsNumeric,
	"IsOrdered":               types.IsOrdered,
	"IsString":                types.IsString,
	"IsUnsigned":              types.IsUnsigned,
	"IsUntyped":               types.IsUntyped,
	"Label":                   new(types.Label),
	"LookupFieldOrMethod":     types.LookupFieldOrMethod,
	"Map":             new(types.Map),
	"MethodExpr":      types.MethodExpr,
	"MethodSet":       new(types.MethodSet),
	"MethodVal":       types.MethodVal,
	"MissingMethod":   types.MissingMethod,
	"Named":           new(types.Named),
	"NewArray":        types.NewArray,
	"NewChan":         types.NewChan,
	"NewChecker":      types.NewChecker,
	"NewConst":        types.NewConst,
	"NewField":        types.NewField,
	"NewFunc":         types.NewFunc,
	"NewInterface":    types.NewInterface,
	"NewLabel":        types.NewLabel,
	"NewMap":          types.NewMap,
	"NewMethodSet":    types.NewMethodSet,
	"NewNamed":        types.NewNamed,
	"NewPackage":      types.NewPackage,
	"NewParam":        types.NewParam,
	"NewPkgName":      types.NewPkgName,
	"NewPointer":      types.NewPointer,
	"NewScope":        types.NewScope,
	"NewSignature":    types.NewSignature,
	"NewSlice":        types.NewSlice,
	"NewStruct":       types.NewStruct,
	"NewTuple":        types.NewTuple,
	"NewTypeName":     types.NewTypeName,
	"NewVar":          types.NewVar,
	"Nil":             new(types.Nil),
	"Object":          new(types.Object),
	"ObjectString":    types.ObjectString,
	"Package":         new(types.Package),
	"PkgName":         new(types.PkgName),
	"Pointer":         new(types.Pointer),
	"Qualifier":       new(types.Qualifier),
	"RecvOnly":        types.RecvOnly,
	"RelativeTo":      types.RelativeTo,
	"Rune":            types.Rune,
	"Scope":           new(types.Scope),
	"Selection":       new(types.Selection),
	"SelectionKind":   new(types.SelectionKind),
	"SelectionString": types.SelectionString,
	"SendOnly":        types.SendOnly,
	"SendRecv":        types.SendRecv,
	"Signature":       new(types.Signature),
	"Sizes":           new(types.Sizes),
	"SizesFor":        types.SizesFor,
	"Slice":           new(types.Slice),
	"StdSizes":        new(types.StdSizes),
	"String":          types.String,
	"Struct":          new(types.Struct),
	"Tuple":           new(types.Tuple),
	"Typ":             types.Typ,
	"Type":            new(types.Type),
	"TypeAndValue":    new(types.TypeAndValue),
	"TypeName":        new(types.TypeName),
	"TypeString":      types.TypeString,
	"Uint":            types.Uint,
	"Uint16":          types.Uint16,
	"Uint32":          types.Uint32,
	"Uint64":          types.Uint64,
	"Uint8":           types.Uint8,
	"Uintptr":         types.Uintptr,
	"Universe":        types.Universe,
	"Unsafe":          types.Unsafe,
	"UnsafePointer":   types.UnsafePointer,
	"UntypedBool":     types.UntypedBool,
	"UntypedComplex":  types.UntypedComplex,
	"UntypedFloat":    types.UntypedFloat,
	"UntypedInt":      types.UntypedInt,
	"UntypedNil":      types.UntypedNil,
	"UntypedRune":     types.UntypedRune,
	"UntypedString":   types.UntypedString,
	"Var":             new(types.Var),
	"WriteExpr":       types.WriteExpr,
	"WriteSignature":  types.WriteSignature,
	"WriteType":       types.WriteType,
}
