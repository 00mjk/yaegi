package export

// Generated by 'goexports reflect'. Do not edit!

import "reflect"

// Reflect contains exported symbols from reflect
var Reflect = &map[string]interface{}{
	"Append":          reflect.Append,
	"AppendSlice":     reflect.AppendSlice,
	"Array":           reflect.Array,
	"ArrayOf":         reflect.ArrayOf,
	"Bool":            reflect.Bool,
	"BothDir":         reflect.BothDir,
	"Chan":            reflect.Chan,
	"ChanDir":         new(reflect.ChanDir),
	"ChanOf":          reflect.ChanOf,
	"Complex128":      reflect.Complex128,
	"Complex64":       reflect.Complex64,
	"Copy":            reflect.Copy,
	"DeepEqual":       reflect.DeepEqual,
	"Float32":         reflect.Float32,
	"Float64":         reflect.Float64,
	"Func":            reflect.Func,
	"FuncOf":          reflect.FuncOf,
	"Indirect":        reflect.Indirect,
	"Int":             reflect.Int,
	"Int16":           reflect.Int16,
	"Int32":           reflect.Int32,
	"Int64":           reflect.Int64,
	"Int8":            reflect.Int8,
	"Interface":       reflect.Interface,
	"Invalid":         reflect.Invalid,
	"Kind":            new(reflect.Kind),
	"MakeChan":        reflect.MakeChan,
	"MakeFunc":        reflect.MakeFunc,
	"MakeMap":         reflect.MakeMap,
	"MakeMapWithSize": reflect.MakeMapWithSize,
	"MakeSlice":       reflect.MakeSlice,
	"Map":             reflect.Map,
	"MapOf":           reflect.MapOf,
	"Method":          new(reflect.Method),
	"New":             reflect.New,
	"NewAt":           reflect.NewAt,
	"Ptr":             reflect.Ptr,
	"PtrTo":           reflect.PtrTo,
	"RecvDir":         reflect.RecvDir,
	"Select":          reflect.Select,
	"SelectCase":      new(reflect.SelectCase),
	"SelectDefault":   reflect.SelectDefault,
	"SelectDir":       new(reflect.SelectDir),
	"SelectRecv":      reflect.SelectRecv,
	"SelectSend":      reflect.SelectSend,
	"SendDir":         reflect.SendDir,
	"Slice":           reflect.Slice,
	"SliceHeader":     new(reflect.SliceHeader),
	"SliceOf":         reflect.SliceOf,
	"String":          reflect.String,
	"StringHeader":    new(reflect.StringHeader),
	"Struct":          reflect.Struct,
	"StructField":     new(reflect.StructField),
	"StructOf":        reflect.StructOf,
	"StructTag":       new(reflect.StructTag),
	"Swapper":         reflect.Swapper,
	"Type":            new(reflect.Type),
	"TypeOf":          reflect.TypeOf,
	"Uint":            reflect.Uint,
	"Uint16":          reflect.Uint16,
	"Uint32":          reflect.Uint32,
	"Uint64":          reflect.Uint64,
	"Uint8":           reflect.Uint8,
	"Uintptr":         reflect.Uintptr,
	"UnsafePointer":   reflect.UnsafePointer,
	"Value":           new(reflect.Value),
	"ValueError":      new(reflect.ValueError),
	"ValueOf":         reflect.ValueOf,
	"Zero":            reflect.Zero,
}
